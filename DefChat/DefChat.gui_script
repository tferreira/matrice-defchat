require "DefChat/alarm"
require "main/DefChat_properties"

local shared_data = require "multiplayer.shared_data"

local iter = 0

local msgStrings = {}


function init(self)
	msg.post(".", "acquire_input_focus")

	-- ALARMS
	self.caret_alarm = {name = "CARET_ALARM", time = 0.48}
	self.stamp_alarm = {name = "STAMP_ALARM", time = 0.001}
	
	-- < INTEGERS
	self.messages = 0
	self.dlt = 0
	-- />

	-- < Booleans
	self.enter = false
	self.caretActive = -1 -- -1 = False, 1 = true
	-- />

	-- < STRINGS AND THINGS
	self.chat = ""
	self.dltMash = ""
	-- />

	-- < TABLES
	self.stamp_text = {go = false, instant = false}
	
	self.hiddenChat = {
		text = "",
		size = {}
	}

	self.chatProperties = {}
	-- />

	

	-- -- DEFAULTS
	
	self.cN = gui.get_node("Caret")
	self.cL = gui.get_node("CommandLine")
	self.cB = gui.get_node("Chatbox")
	self.cT = gui.get_node("Chat_Text")
	
	self.chatNodes = {}
	self.chatMsgs = {}
	self.stamped = 0
	self.caret = -1
	
	self.chatColor = gui.get_color(self.cT)
	self.caretPos = gui.get_position(self.cN)
	self.chatPos = gui.get_position(self.cT)
	
	self.clProperties = {width = gui.get_size(self.cL).x, height = gui.get_size(self.cL).y},


	
	-- -- < INITIALIZE >
	gui.set_color(self.cL,Properties.commandline_color.idle)			-- Set command line color to specified property.

	self.lineWidth = self.clProperties.width - (self.clProperties.width/15)

	self.font = Properties.fonts.default									-- Set default font to specified property.
	print("DEF_CHAT:FONTS:ACQUIRED: "); pprint(Properties.fonts)
	pprint("DEF_CHAT:FONT:DEFAULT: ".. self.font.name)

	self.chatCommands = Properties.commands

	self.stamp_text.instant = Properties.stamp_text_instant

	self.caret_alarm.time = Properties.caret_speed
	self.stamp_alarm.time = Properties.stamp_speed
end

function update(self, dt)
	
	-- Update alarms
	if self.stamp_text.go == true then
		if self.stamp_text.instant == true then
			stamp(self,self.stamp_text.instant)
		elseif Alarm(self.stamp_alarm) == true then
			stamp(self)
		end
	end
	-- End of updating alarms
	
	caret(self)														-- Update "|" in commandline. This: "|" is called a caret. (The more you know!)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("message") then							-- post message to "DefChat" object with message_id of "message" to print something from another script. Example in init.
		self.lineWidth = self.clProperties.width - (self.clProperties.width/15)
		self.chatProperties = get_length(self,message)
		if get_command(self,message.text) == false then
			buildMessage(self,message.text)
		end
		print("DEF_CHAT:CHAT:RECEIVED_MESSAGE: " .. message.text)
		print("DEF_CHAT:STRING:LENGTH: " .. self.chatLen)
	end
end

function on_input(self, action_id, action)
	if (action_id == hash("enter") and action.released) then 		-- If enter is pressed, it basically flips a switch value. On/off/on/off etc.
		if self.enter == false then
			msg.post(local_player_id, "block_move")
			self.enter = true
			gui.set_color(self.cL,Properties.commandline_color.active)
		elseif self.enter == true then
			msg.post(local_player_id, "release_move")
			self.enter = false
			print("DEF_CHAT:HIDDEN_CHARACTERS: " .. self.dltMash)
			self.dltMash = ""
			if string.match(self.chat,"%S") ~= nil then
				self.lineWidth = self.clProperties.width - (self.clProperties.width/15)
				self.chatProperties = get_length(self,self.chat)
				if get_command(self, self.chat) == false then
					-- Send typed message to NoobHub
					msg.post(shared_data.current_map.url, 'send_message', {body = self.chat})
					-- Add local player name to message:
					self.chat = shared_data.current_char.name .. ': ' .. self.chat
					buildMessage(self,self.chat)					--Display new message
				end
				print("DEF_CHAT:CHAT:RECEIVED_TEXT: " .. self.chat)
				print("DEF_CHAT:STRING:LENGTH: " .. self.chatLen)
			end
			self.chat = ""
			self.hiddenChat.text = ""
			self.hiddenChat.size = 0
			gui.set_text(gui.get_node("CL_Text"),self.chat)
			gui.set_color(self.cL,Properties.commandline_color.idle)
		end
	end
																			-- End of enter switcheruner
	
	if self.enter == true then
		if action_id == hash("text") then
			if string.len(action.text) == 1 then
				self.chat = self.chat .. action.text
				self.chatProperties = get_length(self,self.chat)
				if self.chatProperties.width >= self.lineWidth then
					hideChar(self,true,action.text)						-- When the chat exceeds the commandline, this trims it's backend
				else
					self.hiddenChat.text = self.chat
				end
				gui.set_text(gui.get_node("CL_Text"), self.hiddenChat.text)
			end
		elseif action_id == hash("backspace") and self.chatLen > 0 then
			if action.pressed or action.repeated then
				self.chat = string.sub(self.chat, 1, -2)
				self.chatProperties = get_length(self,self.chat)
				if self.chatProperties.width >= self.lineWidth then
					hideChar(self,false)								-- When the chat exceeds the commandline, this trims it's front end and adds back to it's backend
				else
					self.hiddenChat.text = self.chat
				end
				gui.set_text(gui.get_node("CL_Text"), self.hiddenChat.text)
			end
		end
		self.hiddenChat.size = get_length(self, self.hiddenChat.text)
	end
end

local dltNum = 0
local dltChar = ""

function hideChar(self,switch,key)
	if switch == true then
		dltChar = string.sub(self.hiddenChat.text,1,1)
		local rev = string.reverse(self.hiddenChat.text)
		self.hiddenChat.text = string.sub(rev,1,-2)
		self.hiddenChat.text = string.reverse(self.hiddenChat.text) .. key
		dltNum = dltNum + 1
		self.dltMash = self.dltMash .. dltChar
	else
		if dltNum ~= 0 then
			local rev = string.reverse(self.hiddenChat.text)
			self.dltRead = string.reverse(self.dltMash)
			rev = rev .. string.sub(self.dltRead,1,1)
			self.hiddenChat.text = string.reverse(rev)
			self.dltMash = string.sub(self.dltMash,1,-2)
			dltNum = dltNum - 1
		end
		self.hiddenChat.text = string.sub(self.hiddenChat.text,1,-2)
	end
end

function bumpChat(self,txt)
	self.messageH = (self.chatProperties.height) -- Calculation that compensate for space change with linebreaks.
	if get_table_length(self.chatNodes) > 8 then
		self.dlt = self.dlt + 1
		gui.delete_node(self.chatNodes[self.dlt])
		self.chatNodes[self.dlt] = nil
	end
	if self.messages ~= 0 then
		local bump = self.messages + 7
		for i=self.dlt,bump,1 do
			if self.chatNodes[i] ~= nil then
				local bPos = gui.get_position(self.chatNodes[i])
				local bPos = vmath.vector3(bPos.x,bPos.y+math.ceil(self.messageH),bPos.z)
				gui.set_position(self.chatNodes[i],bPos)
			end
		end
	end
end		

function buildMessage(self,txt)
	self.chatProperties = get_length(self,txt)
	self.messages = self.messages + 1	

	-- LINEBREAKER

	local total = ""
	local linebreaks = {}
	local l = 0
	
	while true do
		l = l + 1
		if l > self.chatLen then
			print("DEF_CHAT:LINEBREAKER:REACHED_END\n")
			local l = 0
			break
		end
		local let = string.sub(txt,l,l)
		total = total .. let
		local thisLine = gui.get_text_metrics(self.font.name,total,self.lineWidth)
		if thisLine.width >= self.lineWidth then
			total = ""
			table.insert(linebreaks,l)
			print("DEF_CHAT:LINEBREAKER:NEW_LINE_AT: " .. l)
			print("DEF_CHAT:LINEBREAKER:THIS_LINES_WIDTH: " .. thisLine.width .. "\n")
		end
	end

	if linebreaks[1] ~= nil then
		print("DEF_CHAT:LINEBREAKER:NEW_LINES_AT: "); pprint(linebreaks)
	else
		print("DEF_CHAT:LINEBREAKER:NO_LINEBREAKS")
	end

	local formattedString = txt
	local takeaway = ""
	local prevLinebreak = 0
	
	if linebreaks[1] == nil then
		self.FSTotal = txt
	else
		self.FSTotal = ""
	end

	self.linebreaksTotal = get_table_length(linebreaks)
	
	for b=1,self.linebreaksTotal,1 do
		local linebreak = linebreaks[b]
		linebreak = linebreak - prevLinebreak
		formattedString = string.sub(formattedString,1,linebreak)
		takeaway = string.sub(txt,(linebreaks[b]+1),-1)					 -- Takeaway prints with a copy of the last letter of the previous line for some mathmatical reason. This negates that.
		prevLinebreak = prevLinebreak + linebreak
		print("DEF_CHAT:LINEBREAKER:LINEBREAKING_AT: " .. linebreak .. "\n")
		print("DEF_CHAT:LINEBREAKER:~PREFIX~_STRING_FOR_LINEBREAK_INSERTION: " .. formattedString)
		print("DEF_CHAT:LINEBREAKER:~SUFFIX~_STRING_FOR_LINEBREAK_INSERTION: " .. takeaway .. "\n")
		formattedString = formattedString .. "\n"
		self.FSTotal = self.FSTotal .. formattedString
		formattedString = takeaway
		if b == get_table_length(linebreaks) then
			self.FSTotal = self.FSTotal .. takeaway
		end
	end

	-- CHAT_BUILDER

	self.chatProperties = gui.get_text_metrics(self.font.name,self.FSTotal,self.lineWidth,true)
	self.linebreakAdjust = vmath.vector3(self.chatPos.x,(self.chatPos.y + (self.chatProperties.height/2)),self.chatPos.z) -- Calculation which compensates for space change with linebreaks.
	
	bumpChat(self,txt)

	print("DEF_CHAT:CHAT_BUILDER:POSITION_LINEBREAK_ADJUSTION: " .. self.linebreakAdjust)
	print("DEF_CHAT:CHAT_BUILDER:ADJUSTION_DIFFERENCE: " .. tostring(self.chatPos - self.linebreakAdjust) .. "\n")
	
	self.chatNodes[self.messages] = gui.new_text_node(self.chatPos,"")
	self.chatMsgs[self.messages] = self.FSTotal

	
	self.stamp_text.go = true; -- This turns on the stamping function.

	
	msgStrings[self.messages] = self.FSTotal
	defChat(self,self.chatNodes[self.messages])
	txt = ""
	self.chatProperties = get_length(self, txt)
end

local let = 0
local total = ""

function stamp(self,immediate)
	while self.chatNodes[self.stamped + 1] == Deleted do
		print("DEF_CHAT:STAMP:SKIPPED_DELETED_NODE")
		self.stamped = self.stamped + 1
		let = 0
		total = ""
	end
	if immediate == true then
		print("DEF_CHAT:INSTANT_STAMPED:\n" .. msgStrings[self.stamped + 1] .. "\n")
		gui.set_text(self.chatNodes[self.stamped + 1],msgStrings[self.stamped + 1])
		self.stamped = self.stamped + 1
		msgStrings[self.stamped - 1] = nil
		self.stamp_text.go = false
	else
		let = let + 1
		local maxLet = string.len(msgStrings[self.stamped + 1])
		local letter = string.sub(msgStrings[self.stamped + 1],let,let)
		total = total .. letter
		gui.set_text(self.chatNodes[self.stamped + 1],total)
		
		if let >= maxLet then
			print("DEF_CHAT:STAMPED:\n" .. total .. "\n")
			total = ""
			let = 0
			self.stamped = self.stamped + 1
			msgStrings[self.stamped - 1] = nil
			self.stamp_text.go = false
		end
	end
	if self.messages > self.stamped then
		self.stamp_text.go = true
	end
end
	
function defChat(self,node)
	gui.set_size_mode(node,gui.SIZE_MODE_MANUAL)
	gui.set_size(node,vmath.vector3(self.lineWidth,self.chatProperties.height,0))
	gui.set_parent(node,gui.get_node("Chatbox"))
	gui.set_position(node,self.linebreakAdjust)
	gui.set_font(node,self.font.name)
	gui.set_pivot(node,gui.PIVOT_W)
	gui.set_color(node,self.chatColor)
end

function caret(self)
	if self.enter == true then
		if self.caret == 1 then
			if self.hiddenChat.size.width ~= nil then
				self.chatSize = self.hiddenChat.size.width
			else
				self.chatSize = 0
			end
			gui.set_position(self.cN,vmath.vector3(self.caretPos.x+self.chatSize,self.caretPos.y,self.caretPos.z))
		end
		if Alarm(self.caret_alarm) == true then
			self.caret = self.caret * -1
			if self.caret == 1 then
				gui.set_text(self.cN,"|")
			else
				gui.set_text(self.cN,"")
				gui.set_position(self.cN,self.caretPos)
			end
		end
	elseif self.enter == false then
		gui.set_text(self.cN,"")
		gui.set_position(self.cN,self.caretPos)
	end
end

function clear_chat(self,amt)
	if amt == nil then
		amt = get_table_length(self.chatNodes)
	end
	for n=1,amt,1 do
		self.dlt = self.dlt + 1
		gui.delete_node(self.chatNodes[self.dlt])
		self.chatNodes[self.dlt] = nil
	end
end

function get_command(self,string)
	local found = false
	local args = {}
	local cutout = 0
	
	self.command = ""
	
	if string.sub(string, 1,1) == ">" then
		local read = string.sub(string, 2,-1)
		self.command = string.match(read,"%a+") --"(%w+)(.+)")
		self.command = string.lower(self.command)

		cutout = string.len(self.command)
	end
	
	for i=1,get_table_length(self.chatCommands),1 do
		if self.chatCommands[i].command == self.command then

			if self.chatCommands[i].args ~= nil then
				for a=1,get_table_length(self.chatCommands[i].args),1 do

					read = string.sub(string, 2+cutout,-1)
					local arg = string.match(read,"%a+") --"(%w+)(.+)")
					if arg == nil then
						arg = string.match(read,"%d+")
						arg = tonumber(arg)
					else
						arg = string.lower(arg)
					end

					cutout = cutout + string.len(arg)
					
					args[a] = arg
				end
			end

			_G[self.chatCommands[i].func](self,unpack(args))
			found = true
		end
	end
	return found
end
	
local it = ""

function get_length(self,it)
	if type(it) == "table" then
		self.chatLen = string.len(it.text)
		it = it.text
	else
		self.chatLen = string.len(it)
	end
	return gui.get_text_metrics(self.font.name,it,self.lineWidth)
end

function get_table_length(T)
	local items = 0
	for _ in pairs(T) do
		items = items + 1
	end
	return items
end